name: Build Python Executable and Create Multi-Platform Release

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
    paths:
      - 'Python/**' # Only trigger if changes are made within the Python folder

jobs:
  # Job 1: Create the GitHub Release (runs only once)
  create-github-release:
    runs-on: ubuntu-latest # This job can run on any OS, as it only creates the release
    permissions:
      contents: write # Required to create a GitHub Release (write permissions)
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # Output the upload URL for subsequent jobs
      release_tag: ${{ steps.create_release.outputs.tag_name }} # Output the tag for asset naming
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for changelog generation

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag if it exists
          LAST_TAG=$(git tag --sort=-version:refname | head -n1)
          
          if [ -z "$LAST_TAG" ]; then
            # If no previous tag, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%an)" --reverse)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%an)")
          fi
          
          # Handle case where no new commits
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="- No new commits since last release"
          fi
          
          # Save changelog to output (handle multiline)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided GitHub Token
        with:
          tag_name: release-${{ github.run_id }}-${{ github.run_attempt }} # Unique and valid tag for this build
          release_name: Musicova Multi-Platform Build ${{ github.sha }} # Descriptive release name including full SHA
          body: |
            ## üéµ Musicova Multi-Platform Release
            
            Automated multi-platform build of musicova.py executable from commit `${{ github.sha }}`.
            This release includes builds for Windows, Linux, and macOS.
            
            ### üìù Changes in this release:
            ${{ steps.changelog.outputs.changelog }}
            
            ### üì¶ Downloads:
            - **üñ•Ô∏è Windows**: `musicova-windows-${{ github.sha }}.exe`
            - **üêß Linux**: `musicova-linux-${{ github.sha }}` (make executable with `chmod +x`)
            - **üçé macOS**: 
              - `musicova-macos-${{ github.sha }}.dmg` (disk image for installation)
              - `musicova-macos-${{ github.sha }}.app.zip` (compressed application bundle)
            
            ### üöÄ How to run:
            - **Windows**: Download and run the .exe file directly
            - **Linux**: Download, make executable (`chmod +x filename`), then run
            - **macOS**: Download .dmg and drag to Applications, OR download .app.zip, extract, and run
            
            ---
            *Built from Python folder changes ‚Ä¢ Commit: ${{ github.sha }} ‚Ä¢ Build: ${{ github.run_id }}*
          draft: false # Set to true if you want to manually publish later
          prerelease: false # Set to true for pre-release builds

  # Job 2: Build and upload executables for each OS (runs in parallel)
  build-and-upload:
    # This job depends on the 'create-github-release' job completing successfully.
    needs: create-github-release
    strategy:
      matrix:
        include:
          - os: windows-latest
            os_name: windows
            executable_suffix: .exe
            pyinstaller_name: musicova.exe
          - os: ubuntu-latest
            os_name: linux
            executable_suffix: ""
            pyinstaller_name: musicova
          - os: macos-latest
            os_name: macos
            executable_suffix: ""
            pyinstaller_name: musicova.app
    runs-on: ${{ matrix.os }} # Run each build on its respective OS runner
    permissions:
      contents: write # Required to upload assets to the release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # Use the latest stable Python 3 version available on the runner

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install create-dmg

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        working-directory: ./Python # Ensure pip install runs from the Python directory

      - name: Compile Python script to executable
        run: pyinstaller --onefile --windowed musicova.py --add-data "fonts/DynaPuff-Regular.ttf${{ matrix.os == 'windows-latest' && ';' || ':' }}fonts"
        working-directory: ./Python # PyInstaller will output build artifacts to ./Python/dist/

      # Windows: Upload .exe directly
      - name: Upload Windows Executable
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: ./Python/dist/musicova.exe
          asset_name: musicova-${{ matrix.os_name }}-${{ github.sha }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      # Linux: Upload executable without extension
      - name: Upload Linux Executable
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: ./Python/dist/musicova
          asset_name: musicova-${{ matrix.os_name }}-${{ github.sha }}
          asset_content_type: application/octet-stream

      # macOS: Create DMG and compress .app, then upload both
      - name: Create macOS packages
        if: matrix.os == 'macos-latest'
        run: |
          # Create a temporary directory for DMG creation
          mkdir -p dmg_temp
          cp -r dist/musicova.app dmg_temp/
          
          # Create DMG using create-dmg
          create-dmg \
            --volname "Musicova" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --icon "musicova.app" 175 120 \
            --hide-extension "musicova.app" \
            --app-drop-link 425 120 \
            "musicova.dmg" \
            "dmg_temp/" || \
          hdiutil create -volname "Musicova" -srcfolder dmg_temp -ov -format UDZO musicova.dmg
          
          # Compress .app bundle for upload (since GitHub can't upload directories)
          cd dist && zip -r ../musicova.app.zip musicova.app
        working-directory: ./Python

      - name: Upload macOS App Bundle (compressed)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: ./Python/musicova.app.zip
          asset_name: musicova-${{ matrix.os_name }}-${{ github.sha }}.app.zip
          asset_content_type: application/zip

      - name: Upload macOS DMG
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: ./Python/musicova.dmg
          asset_name: musicova-${{ matrix.os_name }}-${{ github.sha }}.dmg
          asset_content_type: application/x-apple-diskimage
