name: Multi-Platform Executable Release

on:
  push:
    branches:
      - main
    paths:
      - 'Python/**'

permissions:
  contents: write

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_gh_release.outputs.upload_url }}
      release_tag: ${{ steps.create_gh_release.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Generate Release Tag and Name
        id: generate_tag_name
        run: |
          RELEASE_TAG="build-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}"
          RELEASE_NAME="Musicova Multi-Platform Build ${{ github.sha }}"
          RELEASE_BODY=$(cat <<EOF
            Automated multi-platform build of `musicova.py` executable from commit `${{ github.sha }}`.

            This release includes builds for Windows, Linux, and macOS.
            ---
            **To run:**
            Download the appropriate executable for your operating system.
            * For Windows: `musicova-windows-${{ github.sha }}.exe`
            * For macOS: `musicova-macos-${{ github.sha }}`
            * For Linux: `musicova-ubuntu-${{ github.sha }}`
            ---
            See changes in the `Python` folder.
          EOF
          )
          echo "tag_name=${RELEASE_TAG}" >> $GITHUB_OUTPUT
          echo "release_name=${RELEASE_NAME}" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_BODY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_gh_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.generate_tag_name.outputs.tag_name }}
          name: ${{ steps.generate_tag_name.outputs.release_name }}
          body: ${{ steps.generate_tag_name.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-executables:
    name: Build on ${{ matrix.os_display_name }}
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os_runner: windows-latest
            os_display_name: Windows
            executable_suffix: '.exe'
            release_asset_name_os_part: windows
          - os_runner: ubuntu-latest
            os_display_name: Ubuntu Linux
            executable_suffix: ''
            release_asset_name_os_part: ubuntu
          - os_runner: macos-latest
            os_display_name: macOS
            executable_suffix: ''
            release_asset_name_os_part: macos
    runs-on: ${{ matrix.os_runner }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.5'

      - name: Install System Dependencies (CMake and Build Tools for Linux)
        if: matrix.os_runner == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential python3-dev
          sudo apt-get install python3-tk

      # --- macOS fix start ---
      - name: Update Homebrew (macOS)
        if: matrix.os_runner == 'macos-latest'
        run: brew update

      - name: Install System Dependencies (CMake for macOS)
        if: matrix.os_runner == 'macos-latest'
        run: brew install cmake
        continue-on-error: false

      - name: Install TKinter (macOS)
        if: matrix.os_runner == 'macos-latest'
        run: brew install python-tk
        continue-on-error: false

      - name: Add Homebrew to PATH (macOS)
        if: matrix.os_runner == 'macos-latest'
        run: echo "/usr/local/bin" >> $GITHUB_PATH
      # --- macOS fix end ---

      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel setuptools
          pip install pyinstaller
          pip install --no-build-isolation -r requirements.txt
        working-directory: ./Python
        continue-on-error: false

      - name: Compile Python Script to Executable
        run: |
          pyinstaller --onefile --windowed musicova_python_app.py --add-data "fonts/DynaPuff-Regular.ttf:fonts"
        working-directory: ./Python
        continue-on-error: false

      - name: Set Executable Permissions (Linux/macOS)
        if: matrix.os_runner == 'ubuntu-latest' || matrix.os_runner == 'macos-latest'
        run: chmod +x ./Python/dist/musicova

      - name: Rename Executable for Release Asset Naming
        id: rename_executable
        run: |
          FINAL_ASSET_NAME="musicova-${{ matrix.release_asset_name_os_part }}-${{ github.sha }}${{ matrix.executable_suffix }}"
          PYINSTALLER_OUTPUT_PATH=$(find ./Python/dist -maxdepth 1 -type f -name "musicova*" -print -quit)
          if [ -z "$PYINSTALLER_OUTPUT_PATH" ]; then
            echo "Error: PyInstaller executable not found in ./Python/dist."
            exit 1
          fi
          mv "$PYINSTALLER_OUTPUT_PATH" "./Python/dist/$FINAL_ASSET_NAME"
          echo "final_asset_path=./Python/dist/$FINAL_ASSET_NAME" >> $GITHUB_OUTPUT
        continue-on-error: false

      - name: Upload Executable to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.create-release.outputs.release_tag }}
          files: ${{ steps.rename_executable.outputs.final_asset_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: false
