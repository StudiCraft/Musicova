name: Build Python Executable and Create Multi-Platform Release

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
    paths:
      - 'Python/**' # Only trigger if changes are made within the Python folder

jobs:
  # Job 1: Create the GitHub Release (runs only once)
  create-github-release:
    runs-on: ubuntu-latest # This job can run on any OS, as it only creates the release
    permissions:
      contents: write # Required to create a GitHub Release (write permissions)
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }} # Output the upload URL for subsequent jobs
      release_tag: ${{ steps.create_release.outputs.tag_name }} # Output the tag for asset naming
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided GitHub Token
        with:
          # Use github.sha for a more descriptive and unique tag.
          # The run_id and run_attempt ensure uniqueness even for multiple runs on the same commit.
          tag_name: build-${{ github.ref_name }}-${{ github.run_id }}-${{ github.run_attempt }}
          release_name: Musicova Multi-Platform Build ${{ github.sha }}
          body: |
            Automated multi-platform build of musicova.py executable from commit `${{ github.sha }}`.
            This release includes builds for Windows, Linux, and macOS.
            ---
            **To run:**
            Download the appropriate executable for your operating system.
            * For Windows: `musicova-windows-${{ github.sha }}.exe`
            * For macOS: `musicova-macos-${{ github.sha }}`
            * For Linux: `musicova-ubuntu-${{ github.sha }}`
            ---
            See changes in the `Python` folder.
          draft: false
          prerelease: false

  # Job 2: Build and upload executables for each OS (runs in parallel)
  build-and-upload:
    needs: create-github-release
    strategy:
      fail-fast: false # Allows other matrix jobs to complete even if one fails
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write # Required to upload assets to the release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' # Explicitly use Python 3.13 as per your error message, or '3.x' for latest stable 3.x

      # Conditionally install build tools based on OS
      - name: Install build tools (Ubuntu)
        if: runner.os == 'Linux' # This applies to ubuntu-latest
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake # Required by tksvg for compilation
          # Add any other system dependencies your Python packages might need here for Ubuntu
        # Add error handling to this step
        continue-on-error: false # Fail the workflow if basic tools can't be installed

      - name: Install build tools (macOS)
        if: runner.os == 'macOS' # This applies to macos-latest
        run: |
          brew install cmake # Required by tksvg for compilation
          # Add any other system dependencies your Python packages might need here for macOS
        # Add error handling to this step
        continue-on-error: false

      - name: Install Python dependencies
        run: |
          # Upgrade pip first, though often not strictly necessary if already up to date
          python -m pip install --upgrade pip
          # Install pyinstaller globally or in the current environment
          pip install pyinstaller
          # Install other dependencies from requirements.txt
          # Make sure 'requirements.txt' is in the 'Python/' directory
          pip install -r requirements.txt
        working-directory: ./Python # Ensure pip install runs from the Python directory
        # Add error handling to this step
        continue-on-error: false # Fail the workflow if Python deps can't be installed

      - name: Compile Python script to executable
        run: pyinstaller --onefile --windowed musicova.py --add-data "fonts/DynaPuff-Regular.ttf:fonts"
        working-directory: ./Python # PyInstaller will output build artifacts to ./Python/dist/
        # Add error handling to this step
        continue-on-error: false # Fail the workflow if compilation fails

      - name: Rename executable for consistent naming (Linux/macOS)
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: |
          mv ./Python/dist/musicova ./Python/dist/musicova-${{ matrix.os == 'ubuntu-latest' && 'ubuntu' || 'macos' }}
        # This helps ensure the output name matches the asset_name logic for non-Windows builds

      - name: Upload Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Use the automatically provided GitHub Token
        with:
          upload_url: ${{ needs.create-github-release.outputs.upload_url }}
          asset_path: |
            ./Python/dist/musicova${{ matrix.os == 'windows-latest' && '.exe' || '' }}${{ matrix.os == 'Linux' && format('-{0}', 'ubuntu') || '' }}${{ matrix.os == 'macOS' && format('-{0}', 'macos') || '' }}
          asset_name: musicova-${{ matrix.os == 'windows-latest' && 'windows' || matrix.os == 'ubuntu-latest' && 'ubuntu' || 'macos' }}-${{ github.sha }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/vnd.microsoft.portable-executable' || 'application/octet-stream' }}
        # Add error handling to this step
        continue-on-error: false # Fail the workflow if asset upload fails
